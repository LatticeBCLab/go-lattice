package abi

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestDecodeReturn(t *testing.T) {
	myabi := FromJson("[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"protocolSuite\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"addProtocol\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"protocolUri\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"protocolUri\",\"type\":\"uint64\"}],\"name\":\"getAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"updater\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct credibilidity.Protocol[]\",\"name\":\"protocol\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"protocolUri\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"updateProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"address\",\"type\":\"address\"}],\"name\":\"getTraceability\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"number\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"protocol\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"updater\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct credibilidity.Evidence[]\",\"name\":\"evi\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"protocolUri\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"address\",\"type\":\"address\"}],\"name\":\"writeTraceability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"protocolUri\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"address\",\"type\":\"address\"}],\"internalType\":\"struct Business.batch[]\",\"name\":\"bt\",\"type\":\"tuple[]\"}],\"name\":\"writeTraceabilityBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]")
	result, err := DecodeReturn(myabi, "getTraceability", "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000010831d00000000000000000000000000000000000000000000000000000558345748490000000000000000000000005e3ebfd79efffef52057c9e4f668571f8bb6b4c50000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000506000000e5a5a5e4bd931000000000000000000000000000000000000000000000323032322d30372d32302030383a3235070000004a617943686f75020000002c00000035666d73744a5169594548676d3463416552457a3878344c6b443548584733386d44347934627159786961422c000000366978464c66457531373771794161636f697246616b37425677445a43414558574d337862484e4353597574")
	expectResult := `[[{"number":1082141,"protocol":5876393396297,"updater":"0x5e3ebfd79efffef52057c9e4f668571f8bb6b4c5","data":[[6,0,0,0,229,165,165,228,189,147,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,50,48,50,50,45,48,55,45,50,48,32,48,56,58,50,53,7,0,0,0,74,97,121,67,104,111,117,2,0,0,0],[44,0,0,0,53,102,109,115,116,74,81,105,89,69,72,103,109,52,99,65,101,82,69,122,56,120,52,76,107,68,53,72],[88,71,51,56,109,68,52,121,52,98,113,89,120,105,97,66,44,0,0,0,54,105,120,70,76,102,69,117,49,55,55,113],[121,65,97,99,111,105,114,70,97,107,55,66,86,119,68,90,67,65,69,88,87,77,51,120,98,72,78,67,83,89,117,116]]}]]`
	assert.NoError(t, err)
	assert.Equal(t, expectResult, result)

	addProtocolResult, err := DecodeReturn(myabi, "addProtocol", "0x0000000000000000000000000000000000000000000000000000000200000001")
	assert.NoError(t, err)
	t.Log(addProtocolResult)
}
