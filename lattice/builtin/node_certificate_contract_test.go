package builtin

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestNewNodeCertificateContract(t *testing.T) {
	contract := NewNodeCertificateContract()
	assert.NotNil(t, contract)
	assert.NotNil(t, contract.MyAbi())
	assert.Equal(t, "zltc_QLbz7JHxYJDL9LAguz9rKrwNtmfY2UoAZ", contract.ContractAddress())
}

func TestNodeCertificateContractEncode(t *testing.T) {
	contract := NewNodeCertificateContract()

	t.Run("Apply", func(t *testing.T) {
		actual, err := contract.Apply(InitConsensus, "zkjg", []string{"zltc_gLpU8MFUgdECP5wJdhoZXVr4kmYH5xuir"})
		assert.NoError(t, err)
		expected := "0xf31f88740000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000047a6b6a67000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000af8c6ed17254f26715099823c1e30293a717bcef"
		assert.Equal(t, expected, actual)
	})

	t.Run("Revoke", func(t *testing.T) {
		actual, err := contract.Revoke([]*RevokeNodeCertificateParam{
			{
				SerialNumber: 0,
				Client:       "zltc_gLpU8MFUgdECP5wJdhoZXVr4kmYH5xuir",
			},
		})
		assert.NoError(t, err)
		expected := "0x7e64d34a00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000af8c6ed17254f26715099823c1e30293a717bcef"
		assert.Equal(t, expected, actual)
	})

	t.Run("UploadPublicKey", func(t *testing.T) {
		actual, err := contract.UploadPublicKey([]string{"0x0102"})
		assert.NoError(t, err)
		expected := "0x1d1ec732000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020102000000000000000000000000000000000000000000000000000000000000"
		assert.Equal(t, expected, actual)
	})

	t.Run("UploadPublicKeyAndApplyCertificate", func(t *testing.T) {
		actual, err := contract.UploadPublicKeyAndApplyCertificate(InitConsensus, "zkjg", []string{"0x0102"})
		assert.NoError(t, err)
		expected := "0x8ce0a2a600000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000047a6b6a670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020102000000000000000000000000000000000000000000000000000000000000"
		assert.Equal(t, expected, actual)
	})
}
