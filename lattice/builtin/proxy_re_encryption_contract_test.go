package builtin

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestProxyReEncryptionContract_Encode(t *testing.T) {
	contract := NewProxyReEncryptionContract()

	t.Run("Encode sharding", func(t *testing.T) {
		actual, err := contract.Sharding(
			"1",
			"zltc_kZnwhpaz8WDoME1jdjQ7vNGmXkgWRtfDT",
			"zltc_Yvvg3Zw2y7Szb3dzaYJsGHwqB4wofLgJ1",
		)
		assert.NoError(t, err)
		assert.NotEmpty(t, actual)
		assert.Contains(t, actual, "0x")
		expected := "0x4d1984b0000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000267a6c74635f6b5a6e776870617a3857446f4d45316a646a5137764e476d586b67575274664454000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000267a6c74635f59767667335a77327937537a6233647a61594a73474877714234776f664c674a310000000000000000000000000000000000000000000000000000"
		assert.Equal(t, expected, actual)
	})

	t.Run("Encode remove proxy secret", func(t *testing.T) {
		actual, err := contract.RemoveProxySecret(
			"1",
			"zltc_kZnwhpaz8WDoME1jdjQ7vNGmXkgWRtfDT",
			[]string{"zltc_Yvvg3Zw2y7Szb3dzaYJsGHwqB4wofLgJ1"},
		)
		expected := "0x32a71428000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000267a6c74635f6b5a6e776870617a3857446f4d45316a646a5137764e476d586b6757527466445400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000267a6c74635f59767667335a77327937537a6233647a61594a73474877714234776f664c674a310000000000000000000000000000000000000000000000000000"
		assert.NoError(t, err)
		assert.NotEmpty(t, actual)
		assert.Equal(t, expected, actual)
	})

	t.Run("Encode select proxy secret", func(t *testing.T) {
		actual, err := contract.SelectProxySecret(
			"zltc_UaHMCRnomTctD6bkEFBMVmYwp1RvDUZyV",
			"1",
			"zltc_kZnwhpaz8WDoME1jdjQ7vNGmXkgWRtfDT",
			"zltc_Yvvg3Zw2y7Szb3dzaYJsGHwqB4wofLgJ1",
		)
		assert.NoError(t, err)
		assert.NotEmpty(t, actual)
		expected := "0x9004671a000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000267a6c74635f5561484d43526e6f6d5463744436626b4546424d566d59777031527644555a795600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000267a6c74635f6b5a6e776870617a3857446f4d45316a646a5137764e476d586b67575274664454000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000267a6c74635f59767667335a77327937537a6233647a61594a73474877714234776f664c674a310000000000000000000000000000000000000000000000000000"
		assert.Equal(t, expected, actual)
	})

	t.Run("Encode store proxy secret", func(t *testing.T) {
		actual, err := contract.StoreProxySecret(
			[]ProxySecret{
				{
					Whitelist: "zltc_Yvvg3Zw2y7Szb3dzaYJsGHwqB4wofLgJ1",
					Cipher:    "b5a07ea9179f2617bdafcc994aaaad34e8762410bfc681c55fe96f66ecb9bc19842f9dd6cab073669332a7021cb7f051",
					Proxy:     "zltc_Yvvg3Zw2y7Szb3dzaYJsGHwqB4wofLgJ1",
				},
			},
			"1",
			"zltc_kZnwhpaz8WDoME1jdjQ7vNGmXkgWRtfDT",
		)
		assert.NoError(t, err)
		assert.NotEmpty(t, actual)
		expected := "0x04332f1900000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000267a6c74635f59767667335a77327937537a6233647a61594a73474877714234776f664c674a310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006062356130376561393137396632363137626461666363393934616161616433346538373632343130626663363831633535666539366636366563623962633139383432663964643663616230373336363933333261373032316362376630353100000000000000000000000000000000000000000000000000000000000000267a6c74635f59767667335a77327937537a6233647a61594a73474877714234776f664c674a3100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000267a6c74635f6b5a6e776870617a3857446f4d45316a646a5137764e476d586b675752746644540000000000000000000000000000000000000000000000000000"
		assert.Equal(t, expected, actual)
	})

	t.Run("Encode update proxy secret", func(t *testing.T) {
		actual, err := contract.UpdateProxySecret(
			[]ProxySecret{
				{
					Whitelist: "zltc_Yvvg3Zw2y7Szb3dzaYJsGHwqB4wofLgJ1",
					Cipher:    "b5a07ea9179f2617bdafcc994aaaad34e8762410bfc681c55fe96f66ecb9bc19842f9dd6cab073669332a7021cb7f051",
					Proxy:     "zltc_Yvvg3Zw2y7Szb3dzaYJsGHwqB4wofLgJ1",
				},
			},
			"1",
			"zltc_kZnwhpaz8WDoME1jdjQ7vNGmXkgWRtfDT",
			[]string{"zltc_Yvvg3Zw2y7Szb3dzaYJsGHwqB4wofLgJ1"},
		)
		assert.NoError(t, err)
		assert.NotEmpty(t, actual)
		expected := "0x6fd462f40000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000267a6c74635f59767667335a77327937537a6233647a61594a73474877714234776f664c674a310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006062356130376561393137396632363137626461666363393934616161616433346538373632343130626663363831633535666539366636366563623962633139383432663964643663616230373336363933333261373032316362376630353100000000000000000000000000000000000000000000000000000000000000267a6c74635f59767667335a77327937537a6233647a61594a73474877714234776f664c674a3100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000267a6c74635f6b5a6e776870617a3857446f4d45316a646a5137764e476d586b6757527466445400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000267a6c74635f59767667335a77327937537a6233647a61594a73474877714234776f664c674a310000000000000000000000000000000000000000000000000000"
		assert.Equal(t, expected, actual)
	})
}
